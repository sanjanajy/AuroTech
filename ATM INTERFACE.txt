ATM INTERFACE:

The ATMs in our cities are built on Python, as we have all seen them. It is a console-based application with five different classes. In order to use the system, the user must enter his or her user ID and pin when it starts. Once the details are entered successfully, ATM functionality is unlocked. As a result of the project, the following operations can be performed:

• Transactions History

• Withdraw

• Deposit

• Transfer

• Quit

CODE:

class User:
    def __init__(self, user_id, pin):
        self.user_id = user_id
        self.pin = pin
        self.balance = 0
        self.transaction_history = []

    def deposit(self, amount):
        self.balance += amount
        self.transaction_history.append(f"Deposit: +${amount}")

    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
            self.transaction_history.append(f"Withdrawal: -${amount}")
        else:
            print("Insufficient funds")

    def transfer(self, amount, recipient):
        if amount <= self.balance:
            self.balance -= amount
            recipient.balance += amount
            self.transaction_history.append(f"Transfer: -${amount} to {recipient.user_id}")
            recipient.transaction_history.append(f"Transfer: +${amount} from {self.user_id}")
        else:
            print("Insufficient funds")

    def show_history(self):
        print("Transaction History:")
        for transaction in self.transaction_history:
            print(transaction)


class ATM:
    def __init__(self):
        self.users = {}
        self.current_user = None

    def authenticate_user(self, user_id, pin):
        if user_id in self.users and self.users[user_id].pin == pin:
            self.current_user = self.users[user_id]
            return True
        else:
            return False

    def create_user(self, user_id, pin):
        if user_id not in self.users:
            if len(pin) == 4 and pin.isdigit():  # Check if PIN is 4 digits and contains only numbers
                self.users[user_id] = User(user_id, pin)
                print("User created successfully")
            else:
                print("PIN must be exactly 4 digits and contain only numbers")
        else:
            print("User ID already exists")

    def main_menu(self):
        while True:
            print("\nATM Main Menu:")
            print("1. Login")
            print("2. Create User")
            print("3. Quit")

            choice = input("Enter your choice: ")

            if choice == "1":
                user_id = input("Enter your user ID: ")
                pin = input("Enter your PIN: ")
                if self.authenticate_user(user_id, pin):
                    self.user_menu()
                else:
                    print("Invalid user ID or PIN")
            elif choice == "2":
                user_id = input("Enter your desired user ID: ")
                pin = input("Enter your desired PIN (4 digits): ")
                self.create_user(user_id, pin)
            elif choice == "3":
                break
            else:
                print("Invalid choice")

    def user_menu(self):
        while True:
            print("\nUser Menu:")
            print("1. View Balance")
            print("2. Deposit")
            print("3. Withdraw")
            print("4. Transfer")
            print("5. View Transaction History")
            print("6. Logout")

            choice = input("Enter your choice: ")

            if choice == "1":
                print(f"Your balance is ${self.current_user.balance}")
            elif choice == "2":
                try:
                    amount = float(input("Enter the amount to deposit: "))
                    if amount > 0:
                        self.current_user.deposit(amount)
                        print("Deposit successful")
                    else:
                        print("Invalid amount")
                except ValueError:
                    print("Invalid input. Please enter a valid amount.")
            elif choice == "3":
                try:
                    amount = float(input("Enter the amount to withdraw: "))
                    if amount > 0:
                        self.current_user.withdraw(amount)
                    else:
                        print("Invalid amount")
                except ValueError:
                    print("Invalid input. Please enter a valid amount.")
            elif choice == "4":
                recipient_id = input("Enter the recipient's user ID: ")
                try:
                    amount = float(input("Enter the amount to transfer: "))
                    if amount > 0:
                        recipient = self.users.get(recipient_id)
                        if recipient:
                            self.current_user.transfer(amount, recipient)
                        else:
                            print("Recipient not found")
                    else:
                        print("Invalid amount")
                except ValueError:
                    print("Invalid input. Please enter a valid amount.")
            elif choice == "5":
                self.current_user.show_history()
            elif choice == "6":
                self.current_user = None
                break
            else:
                print("Invalid choice")


# Main code
if __name__ == "__main__":
    atm = ATM()
    atm.main_menu()